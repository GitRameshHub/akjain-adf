{
	"name": "df_cases_deaths",
	"properties": {
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "ds_cases_deaths_dl",
						"type": "DatasetReference"
					},
					"name": "CasesandDeathsstream"
				},
				{
					"dataset": {
						"referenceName": "ds_lookup_contrycode",
						"type": "DatasetReference"
					},
					"name": "lookupsourcestream"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "ds_processed_cases_deaths",
						"type": "DatasetReference"
					},
					"name": "sinkstream"
				}
			],
			"transformations": [
				{
					"name": "FilterCountry"
				},
				{
					"name": "selectcasesdeathstream"
				},
				{
					"name": "pivottransformation"
				},
				{
					"name": "lookuptransfromation"
				},
				{
					"name": "selecttransformation"
				}
			],
			"scriptLines": [
				"source(output(",
				"          country as string,",
				"          country_code as string,",
				"          continent as string,",
				"          population as integer,",
				"          indicator as string,",
				"          daily_count as short,",
				"          date as date,",
				"          rate_14_day as double,",
				"          source as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> CasesandDeathsstream",
				"source(output(",
				"          country as string,",
				"          country_code_2_digit as string,",
				"          country_code_3_digit as string,",
				"          continent as string,",
				"          population as integer",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> lookupsourcestream",
				"CasesandDeathsstream filter(continent=='Europe' && not(isNull(country_code))) ~> FilterCountry",
				"FilterCountry select(mapColumn(",
				"          country,",
				"          country_code,",
				"          population,",
				"          indicator,",
				"          daily_count,",
				"          source,",
				"          each(match(name=='date'),",
				"               'reported' + '_date' = $$)",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> selectcasesdeathstream",
				"selectcasesdeathstream pivot(groupBy(country,",
				"          country_code,",
				"          population,",
				"          source,",
				"          reported_date),",
				"     pivotBy(indicator, ['confirmed cases', 'deaths']),",
				"     Count = sum(daily_count),",
				"     columnNaming: '$N$V',",
				"     lateral: true) ~> pivottransformation",
				"pivottransformation, lookupsourcestream lookup(pivottransformation@country == lookupsourcestream@country,",
				"     multiple: false,",
				"     pickup: 'any',",
				"     broadcast: 'auto')~> lookuptransfromation",
				"lookuptransfromation select(mapColumn(",
				"          country = pivottransformation@country,",
				"          country_code_2_digit,",
				"          country_code_3_digit,",
				"          source,",
				"          reported_date,",
				"          confirmed_cases_count = {Countconfirmed cases},",
				"          deaths_count = Countdeaths",
				"     ),",
				"     skipDuplicateMapInputs: false,",
				"     skipDuplicateMapOutputs: false) ~> selecttransformation",
				"selecttransformation sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     umask: 0022,",
				"     preCommands: [],",
				"     postCommands: [],",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> sinkstream"
			]
		}
	}
}